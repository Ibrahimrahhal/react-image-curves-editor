{"version":3,"sources":["../../src/lib/histogram/draw.ts","../../src/lib/curves/draw.ts","../../src/lib/curves/apply.ts","../../src/lib/curves/index.tsx","../../src/lib/histogram/index.tsx","App.tsx","index.tsx"],"names":["data","histogramData","canvas","ctx","xs","ys","window","requestAnimationFrame","beginPath","rect","width","height","fillStyle","fill","moveTo","lineWidth","strokeStyle","i","lineTo","spline","length","stroke","arc","Math","PI","round","num","dec","parseFloat","toFixed","defaultCurves","a","r","g","b","x","y","dragging","draggingPont","w","h","pointsToModify","_currentChannel","currentChannel","targetCanvas","canvasRef","useRef","useState","currentCurves","setCurrentCurves","originalImageData","setOriginalImageData","dragged","shift","useEffect","onKeyDown","e","keyCode","which","onKeyUp","document","addEventListener","removeEventListener","imageData","getContext","getImageData","ImageData","Uint8ClampedArray","current","curves","curvesData","push","parseInt","putImageData","Apply","Draw","onMouseDown","points","nativeEvent","offsetX","layerX","offsetY","layerY","Object","assign","index","newPoints","splice","removePoint","onDoubleClick","dx","dy","addPoint","React","ref","onMouseMove","mx","my","onMouseUp","curveToChange","changeCurve","array256","arr","_c","createElement","_ctx","colors","targetRef","image","drawImage","_all","key","max","hist","App","loaded","setLoaded","img","Image","onload","src","style","textAlign","display","justifyContent","alignItems","margin","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.51c5de9a.chunk.js","sourcesContent":["let array256 = () => {\n  let arr = []\n  for (let i = 0; i < 256; i++) {\n    arr[i] = 0\n  }\n  return arr\n}\n\nlet _c: HTMLCanvasElement = document.createElement('canvas'),\n  _ctx: CanvasRenderingContext2D = _c.getContext('2d') as any,\n  data: any,\n  histogramData: { [k: string]: number[] | number }\n\nlet colors = {\n  r: '#d22121',\n  g: '#079407',\n  b: '#1b1bbb',\n  a: '#d6d6d6'\n}\n\nexport default (\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  image: HTMLImageElement | HTMLCanvasElement\n) => {\n  if (!canvas || !ctx) return\n\n  window.requestAnimationFrame(() => {\n    ctx.beginPath()\n    ctx.rect(0, 0, canvas.width, canvas.height)\n    ctx.fillStyle = '#5f5f5f'\n    ctx.fill()\n\n    histogramData = {}\n    histogramData.a = array256()\n    histogramData.r = array256()\n    histogramData.g = array256()\n    histogramData.b = array256()\n\n    if (typeof (image as HTMLImageElement).height === 'number') {\n      _c.width = parseInt(((image as HTMLImageElement).width / 4) as any)\n      _c.height = parseInt(((image as HTMLImageElement).height / 4) as any)\n      _ctx.drawImage(image as HTMLImageElement, 0, 0, _c.width, _c.height)\n    } else {\n      _ctx = (image as HTMLCanvasElement).getContext('2d') as any\n    }\n    data = _ctx.getImageData(0, 0, _c.width, _c.height).data\n    for (var i = 0; i < data.length; i += 4) {\n      let _all =\n        parseInt((data[i] / 3) as any) +\n        parseInt((data[i + 1] / 3) as any) +\n        parseInt((data[i + 2] / 3) as any)\n      if (_all > histogramData.a.length - 1) _all = histogramData.a.length - 1\n      histogramData.a[_all]++\n      histogramData.r[data[i]]++\n      histogramData.g[data[i + 1]]++\n      histogramData.b[data[i + 2]]++\n    }\n\n    histogramData.max = parseInt(data.length) * 0.75\n\n    ctx.lineWidth = 1\n    for (let key in colors) {\n      ctx.strokeStyle = colors[key]\n      ctx.beginPath()\n      ctx.moveTo(0, canvas.height)\n      for (let i = 0; i < 256; i++) {\n        let hist = (histogramData[key][i] / histogramData.max) * 256\n        ctx.lineTo(\n          parseInt(((i / 256) * canvas.width) as any),\n          (1 - hist) * (canvas.height * 0.7) + canvas.height * 0.3\n        )\n      }\n      ctx.lineTo(canvas.width, canvas.height)\n      ctx.stroke()\n    }\n  })\n}\n","import spline from 'cubic-spline'\n\nlet treshold = 2\n\nexport default (\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  xs: number[],\n  ys: number[]\n) => {\n  if (!canvas || !ctx) return\n\n  window.requestAnimationFrame(() => {\n    ctx.beginPath()\n    ctx.rect(0, 0, canvas.width, canvas.height)\n    ctx.fillStyle = '#5f5f5f'\n    ctx.fill()\n\n    ctx.beginPath()\n    ctx.moveTo(0, canvas.height)\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#f1f1f1'\n    ctx.fillStyle = '#f1f1f1'\n\n    for (let i = 0; i < canvas.width / treshold; i++) {\n      ctx.lineTo(\n        ((i * treshold) / canvas.width) * canvas.width,\n        canvas.height -\n          spline((i * treshold) / canvas.width, xs, ys) * canvas.height\n      )\n    }\n\n    ctx.lineTo(\n      xs[xs.length - 1] * canvas.width,\n      canvas.height - ys[ys.length - 1] * canvas.height\n    )\n\n    ctx.stroke()\n\n    for (let i = 0; i < xs.length; i++) {\n      ctx.beginPath()\n      ctx.arc(\n        xs[i] * canvas.width,\n        canvas.height - ys[i] * canvas.height,\n        8,\n        0,\n        2 * Math.PI,\n        false\n      )\n      ctx.fill()\n      ctx.stroke()\n    }\n  })\n}\n","import spline from 'cubic-spline'\n\nconst round = (num: number, dec = 2) => parseFloat(num.toFixed(dec))\n\nexport default (\n  originalImageData: ImageData,\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  curves: any\n) => {\n  if (!canvas || !ctx) return\n  window.requestAnimationFrame(() => {\n    let curvesData: any = { a: [], r: [], g: [], b: [] }\n    let imageData = new Uint8ClampedArray(originalImageData.data)\n    for (let i = 0; i < 256; i++) {\n      curvesData.a.push(\n        (parseInt as any)(\n          spline(round(i / 256), curves.a.xs, curves.a.ys) * 256\n        )\n      )\n      curvesData.r.push(\n        (parseInt as any)(\n          spline(round(i / 256), curves.r.xs, curves.r.ys) * 256\n        )\n      )\n      curvesData.g.push(\n        (parseInt as any)(\n          spline(round(i / 256), curves.g.xs, curves.g.ys) * 256\n        )\n      )\n      curvesData.b.push(\n        (parseInt as any)(\n          spline(round(i / 256), curves.b.xs, curves.b.ys) * 256\n        )\n      )\n    }\n\n    for (let i = 0; i < imageData.length; i += 4) {\n      imageData[i] = curvesData.r[imageData[i]]\n      imageData[i + 1] = curvesData.g[imageData[i + 1]]\n      imageData[i + 2] = curvesData.b[imageData[i + 2]]\n\n      imageData[i] = curvesData.a[imageData[i]]\n      imageData[i + 1] = curvesData.a[imageData[i + 1]]\n      imageData[i + 2] = curvesData.a[imageData[i + 2]]\n    }\n\n    ctx.putImageData(\n      new ImageData(imageData, canvas.width, canvas.height),\n      0,\n      0\n    )\n  })\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport spline from 'cubic-spline'\nimport Draw from './draw'\nimport Apply from './apply'\nimport './index.scss'\n\nconst round = (num: number, dec = 2) => parseFloat(num.toFixed(dec))\nconst defaultCurves = {\n  a: { xs: [0, 1], ys: [0, 1] },\n  r: { xs: [0, 1], ys: [0, 1] },\n  g: { xs: [0, 1], ys: [0, 1] },\n  b: { xs: [0, 1], ys: [0, 1] }\n}\nexport default ({\n  currentChannel: _currentChannel,\n  targetCanvas\n}: {\n  currentChannel?: 'r' | 'g' | 'b' | 'a'\n  targetCanvas: HTMLCanvasElement\n}) => {\n  const currentChannel = _currentChannel || 'a'\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const ctx = useRef<CanvasRenderingContext2D | null>(null)\n  const [currentCurves, setCurrentCurves] = useState(defaultCurves)\n  const [originalImageData, setOriginalImageData] = useState<ImageData | null>(\n    null\n  )\n  let x,\n    y,\n    dragging: boolean,\n    draggingPont: number,\n    w: number,\n    h: number,\n    pointsToModify: {\n      xs: number[]\n      ys: number[]\n    },\n    dragged = false,\n    shift = false\n  useEffect(() => {\n    const onKeyDown = (e: any) => {\n      let key = e.keyCode || e.which\n      if (key == 16) shift = true\n    }\n    const onKeyUp = () => {\n      shift = false\n    }\n    document.addEventListener('keydown', onKeyDown)\n    document.addEventListener('keyup', onKeyUp)\n    return () => {\n      document.removeEventListener('keydown', onKeyDown)\n      document.removeEventListener('keyup', onKeyUp)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (originalImageData) return;\n    const imageData = (targetCanvas.getContext('2d') as any).getImageData(\n      0,\n      0,\n      targetCanvas.width,\n      targetCanvas.height\n    );\n      setOriginalImageData(\n        new ImageData(\n          new Uint8ClampedArray(imageData.data),\n          imageData.width,\n          imageData.height\n        )\n      )\n  }, []);\n  useEffect(() => {\n    if (!canvasRef.current) return\n    const canvas = canvasRef.current\n    canvas.width = 280\n    canvas.height = 280\n    ctx.current = canvas.getContext('2d')\n  }, [canvasRef.current, targetCanvas])\n  useEffect(() => {\n    setCurrentCurves(defaultCurves)\n  }, [currentChannel])\n  useEffect(() => {\n    if (!originalImageData) return\n    Apply(\n      originalImageData,\n      targetCanvas,\n      targetCanvas.getContext('2d') as any,\n      currentCurves\n    )\n  }, [currentCurves])\n  useEffect(() => {\n    if (!canvasRef.current || !ctx.current) return\n    Draw(\n      canvasRef.current,\n      ctx.current,\n      currentCurves[currentChannel].xs,\n      currentCurves[currentChannel].ys\n    )\n  })\n  const removePoint = (index: number) => {\n    let newPoints = currentCurves\n\n    if (index === 0 || index >= newPoints[currentChannel].xs.length - 1) return\n\n    newPoints[currentChannel].xs.splice(index, 1)\n    newPoints[currentChannel].ys.splice(index, 1)\n    setCurrentCurves({ ...newPoints })\n  }\n\n  const changeCurve = (points: { xs: number[]; ys: number[] }) => {\n    let curveToChange = {}\n    curveToChange[currentChannel] = points\n    setCurrentCurves({ ...currentCurves, curveToChange } as any)\n  }\n\n  const addPoint = (x: number, y: number) => {\n    let index = null\n    let newPoints = { ...currentCurves }\n    for (let i = 0; i < newPoints[currentChannel].xs.length; i++) {\n      if (\n        x > newPoints[currentChannel].xs[i] &&\n        x < newPoints[currentChannel].xs[i + 1]\n      ) {\n        index = i + 1\n        continue\n      }\n    }\n\n    newPoints[currentChannel].xs.splice(index as number, 0, x)\n    newPoints[currentChannel].ys.splice(index as number, 0, y)\n    setCurrentCurves(newPoints)\n  }\n\n  const onMouseDown = (\n    e: any,\n    canvas: HTMLCanvasElement,\n    points: {\n      xs: number[]\n      ys: number[]\n    }\n  ) => {\n    dragging = false\n    ;(draggingPont as any) = null\n    ;(pointsToModify as any) = null\n    w = canvas.width\n    h = canvas.height\n\n    x = e.nativeEvent.offsetX || e.nativeEvent.layerX\n    y = h - (e.nativeEvent.offsetY || e.nativeEvent.layerY)\n\n    for (var i = 0; i < points.xs.length; i++) {\n      if (\n        x >= points.xs[i] * w - 6 &&\n        x <= points.xs[i] * w + 6 &&\n        y >= points.ys[i] * h - 6 &&\n        y <= points.ys[i] * h + 6\n      ) {\n        dragging = true\n        draggingPont = i\n        pointsToModify = Object.assign({}, points)\n        continue\n      }\n    }\n\n    if (dragging && shift) {\n      dragging = false\n      ;(draggingPont as any) = null\n      removePoint(draggingPont + 1)\n    }\n  }\n\n  const onMouseMove = (\n    e: any,\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D\n  ) => {\n    if (\n      !dragging ||\n      draggingPont == 0 ||\n      draggingPont == pointsToModify.xs.length - 1\n    )\n      return\n\n    dragged = true\n\n    let mx = e.nativeEvent.offsetX || e.nativeEvent.layerX\n    let my = e.nativeEvent.offsetY || e.nativeEvent.layerY\n\n    pointsToModify.xs[draggingPont] = mx / w\n    pointsToModify.ys[draggingPont] = (h - my) / h\n    Draw(canvas, ctx, pointsToModify.xs, pointsToModify.ys)\n  }\n\n  const onMouseUp = () => {\n    dragging = false\n    if (dragged) {\n      changeCurve(pointsToModify)\n      dragged = false\n    }\n  }\n\n  const onDoubleClick = (\n    e: any,\n    points: {\n      xs: number[]\n      ys: number[]\n    }\n  ) => {\n    let dx = e.nativeEvent.offsetX || e.nativeEvent.layerX\n    let dy = h - (e.nativeEvent.offsetY || e.nativeEvent.layerY)\n    if (\n      spline(round(dx / w), points.xs, points.ys) * h >= dy - 8 &&\n      spline(round(dx / w), points.xs, points.ys) * h <= dy + 8\n    ) {\n      addPoint(round(dx / w), round(dy / h))\n    }\n  }\n\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        onMouseDown={(e) =>\n          onMouseDown(\n            e,\n            canvasRef.current as HTMLCanvasElement,\n            currentCurves[currentChannel]\n          )\n        }\n        onMouseMove={(e) =>\n          onMouseMove(\n            e,\n            canvasRef.current as HTMLCanvasElement,\n            ctx.current as CanvasRenderingContext2D\n          )\n        }\n        onMouseUp={onMouseUp}\n        onDoubleClick={(e) => onDoubleClick(e, currentCurves[currentChannel])}\n      />\n    </div>\n  )\n}\n","import React, { useEffect, useRef } from 'react'\nimport Draw from './draw'\n\nexport default ({\n  targetRef\n}: {\n  targetRef: HTMLImageElement | HTMLCanvasElement\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const ctx = useRef<CanvasRenderingContext2D | null>(null)\n  useEffect(() => {\n    if (!canvasRef.current) return\n    const canvas = canvasRef.current\n    canvas.width = 280\n    canvas.height = 140\n    ctx.current = canvas.getContext('2d')\n  }, [canvasRef.current])\n\n  useEffect(() => {\n    if (!ctx.current || !canvasRef.current) return\n    Draw(canvasRef.current, ctx.current, targetRef)\n  }, [ctx.current])\n\n  return (\n    <div>\n      <canvas ref={canvasRef} />\n    </div>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { ImageCurvesEditor, ImageLevelsHistogram } from 'react-image-curves-editor'\nimport 'react-image-curves-editor/dist/index.css'\n\nconst App = () => {\n    const canvasRef = React.useRef<HTMLCanvasElement>(null);\n    const [loaded, setLoaded] = React.useState(false);\n    useEffect(() => {\n        if (!canvasRef.current) return;\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        if (!ctx) return;\n        const img = new Image();\n        img.onload = () => {\n            canvas.width = img.width;\n            canvas.height = img.height;\n            ctx.drawImage(img, 0, 0);\n            setLoaded(true);\n        };\n        img.src = '/house.jpg';\n    }, [])\n  return (\n    <div>\n      <h1 style={{textAlign: 'center'}}>Curves Editor Demo</h1>\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}>\n        <div style={{\n          margin: '0 20px',\n        }}>\n          <canvas ref={canvasRef}></canvas>\n        </div>\n        <div>\n        {loaded && <ImageLevelsHistogram targetRef={canvasRef.current as any} />}\n        {loaded && <ImageCurvesEditor targetCanvas={canvasRef.current as any} />}\n        </div>\n      </div>\n      <h5 style={{textAlign: 'center'}}>Double click on levels to add new item & shit + mouse click to remove it</h5>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}